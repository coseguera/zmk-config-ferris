// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <250>;
};

#define BT(n) BT_SEL n
#define SCROLL_DN MOVE_DOWN 5
#define SCROLL_UP MOVE_UP 5

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp EQUAL>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp PLUS>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DQT>;
        };
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp SQT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
    &kp Q        &kp W &kp E &kp R          &kp T       &kp Y       &kp U    &kp I          &kp O         &kp P
    &kp A        &kp S &kp D &kp F          &kp G       &kp H       &kp J    &kp K          &kp L         &mt LGUI SEMI
    &ht LSHIFT Z &kp X &kp C &mt LALT V     &mt LCTRL B &kp N       &kp M    &mt LALT COMMA &mt LCTRL DOT &ht RSHIFT SLASH
                             &mt LGUI MINUS &lt 2 ENTER &lt 1 SPACE &kp BSPC
            >;
        };

        first_layer {
            bindings = <
    &kp N1     &kp N2   &kp N3   &kp N4        &kp N5         &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
    &kp EXCL   &kp AT   &kp HASH &kp DLLR      &kp PRCNT      &kp CARET &kp AMPS &kp ASTRK &kp LPAR  &mt LGUI RPAR
    &kp LSHIFT &kp LBKT &kp RBKT &mt LALT LBRC &mt LCTRL RBRC &kp LEFT  &kp DOWN &kp UP    &kp RIGHT &trans
                                 &trans        &mo 3          &trans    &trans
            >;
        };

        second_layer {
            bindings = <
    &kp F1     &kp F2       &kp F3       &kp F4  &kp F5  &none     &msc SCROLL_DN &msc SCROLL_UP &none   &kp C_BRI_UP
    &kp F6     &kp F7       &kp F8       &kp F9  &kp F10 &none     &none          &none          &none   &kp C_BRI_DN
    &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp F11 &kp F12 &kp HOME  &kp PG_DN      &kp PG_UP      &kp END &kp BSLH
                                         &kp DEL &trans  &mkp LCLK &mkp RCLK
            >;
        };

        third_layer {
            bindings = <
    &none     &none     &none     &none      &none     &none &none &none &none &none
    &bt BT(0) &bt BT(1) &bt BT(2) &bt BT(3)  &bt BT(4) &none &none &none &none &none
    &none     &none     &none     &none      &none     &none &none &none &none &none
                                  &bt BT_CLR &trans    &none &none
            >;
        };

    };
};
