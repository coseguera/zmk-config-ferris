#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "balanced";
};

&lt {
    tapping-term-ms = <300>;
};

/ {
    ht: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
    };
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
        
         combo_minus {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp MINUS>;
        };
        
         combo_under {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp UNDER>;
        };
        
         combo_plus {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp PLUS>;
        };
        
         combo_equal {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp EQUAL>;
        };
        
         combo_dqt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DQT>;
        };
        
         combo_sqt {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp SQT>;
        };
        
         combo_bslh {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp BSLH>;
        };
        
         combo_del {
            timeout-ms = <50>;
            key-positions = <26 33>;
            bindings = <&kp DEL>;
        };
        
    };

    macros {
        ZMK_MACRO(bkts_macro,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        )
        ZMK_MACRO(brcs_macro,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        )
    };

        keymap {
                compatible = "zmk,keymap";
                
        default_layer {
            bindings = <
    &kp Q        &kp W       &kp E       &kp R       &kp T          &kp Y       &kp U      &kp I           &kp O         &kp P
    &kp A        &kp S       &kp D       &kp F       &kp G          &kp H       &kp J      &kp K           &kp L         &mt LALT SEMI
    &ht LSHIFT Z &mt LCTRL X &mt LCTRL C &mt LGUI V  &mt LGUI B     &mt LGUI N  &mt LGUI M &mt LCTRL COMMA &mt LCTRL DOT &ht RSHIFT SLASH
                                         &bkts_macro &lt 2 ENTER    &lt 1 SPACE &kp BSPC
            >;
        };

        first_layer {
            bindings = <
    &kp N1   &kp N2   &kp N3   &kp N4      &kp N5       &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
    &kp EXCL &kp AT   &kp HASH &kp DLLR    &kp PRCNT    &kp CARET &kp AMPS &kp ASTRK &kp LPAR  &kp RPAR
    &kp LBKT &kp RBKT &kp LBRC &kp RBRC    &none        &kp LEFT  &kp DOWN &kp UP    &kp RIGHT &none
                               &brcs_macro &trans       &trans    &trans
            >;
        };

        second_layer {
            bindings = <
    &kp F1 &kp F2 &kp F3 &kp F4     &kp F5     &mt C_MUTE K_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP
    &kp F6 &kp F7 &kp F8 &kp F9     &kp F10    &bt BT_SEL 0      &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
    &none  &none  &none  &kp F11    &kp F12    &kp HOME          &kp PG_DN    &kp PG_UP    &kp END      &none
                         &bt BT_CLR &trans     &trans            &trans
            >;
        };

    };
};
